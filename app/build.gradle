buildscript {
    repositories {
        mavenCentral()
        maven {
            url uri('https://oss.sonatype.org/content/repositories/snapshots/')
        }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:1.1.0'
        classpath 'org.xtend:xtend-android-gradle-plugin:0.4.5'
        
        // eclipse AAR plugin: https://github.com/ksoichiro/gradle-eclipse-aar-plugin
        classpath 'com.github.ksoichiro:gradle-eclipse-aar-plugin:0.1.2-SNAPSHOT'
    }
}

apply plugin: 'android'
apply plugin: 'org.xtend.xtend-android'
apply plugin: 'com.github.ksoichiro.eclipse.aar'

task wrapper(type: Wrapper) {
  gradleVersion = '2.2.1'
}

repositories {
    jcenter()
    mavenCentral()
}

// Configure eclipse-aar plugin. To use:
// $ gradle generateEclipseDependencies
// then import generated projects into Eclipse
eclipseAar {
    androidTarget = 'android-22'
    aarDependenciesDir = 'aarDependencies'
    jarDependenciesDir = 'jarDependencies'
    cleanLibsDirectoryEnabled = true
}

tasks.withType(org.xtend.gradle.tasks.XtendCompile) {
   sourceCompatibility "1.7"
}

android {
    compileSdkVersion 22
    buildToolsVersion "21.1.1"

    dependencies {
		// Google support libaries
		compile 'com.android.support:support-v4:22.1.0'
		compile 'com.android.support:appcompat-v7:22.1.0'
	
		// Xtend support libraries
		compile 'org.eclipse.xtend:org.eclipse.xtend.lib:2.8.2'
		//compile 'com.github.tobykurien:xtendroid:0.12.0'

        // jar dependencies
		compile fileTree(dir: 'jarDependencies', includes: ['*.jar'])
    }

    sourceSets {
      main {
        manifest.srcFile 'AndroidManifest.xml'
        aidl.srcDirs = ['src']
        java.srcDirs = ['src']
        res.srcDirs = ['res']
        assets.srcDirs = ['assets']
      }
    }

   signingConfigs {
       release {
            storeFile file("release.keystore")
            storePassword "******"
            keyAlias "******"
            keyPassword "******"
       }
   }

    buildTypes {
        release {
            dependencies {
               compile 'com.google.code.findbugs:jsr305:2.0.2' // needed for proguard
            }
            
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFile file('proguard-project.txt')
            proguardFile getDefaultProguardFile('proguard-android-optimize.txt')
        }
    }

    packagingOptions {
	exclude 'META-INF/eclipse.inf'
    }

	allprojects {
	    afterEvaluate { project ->
	        def propsFile = rootProject.file('keystore.properties')
	        def configName = 'release'

	        if (propsFile.exists() && android.signingConfigs.hasProperty(configName)) {
	            def props = new Properties()
	            props.load(new FileInputStream(propsFile))
	            android.signingConfigs[configName].storeFile = file(props['storeFile'])
	            android.signingConfigs[configName].storePassword = props['storePassword']
	            android.signingConfigs[configName].keyAlias = props['keyAlias']
	            android.signingConfigs[configName].keyPassword = props['keyPassword']
	        }
	    }
	}
}
